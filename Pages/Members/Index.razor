@page "/members"
@using LibraryManagementSystem.Data.Models
@using LibraryManagementSystem.Data.Services
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Members - Library Management System</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-6">
            <h1>Members Management</h1>
        </div>
        <div class="col-6 text-end">
            <a href="/members/create" class="btn btn-primary">
                <i class="bi bi-person-plus"></i> Add New Member
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search members..." 
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-2">
                    <select class="form-select" @bind-Value="membershipStatus" @bind-Value:event="oninput" @onchange="HandleStatusFilter">
                        <option value="">All Status</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Membership No.</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Status</th>
                            <th>Borrowed Books</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredMembers == null || !filteredMembers.Any())
                        {
                            <tr>
                                <td colspan="7" class="text-center">No members found.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var member in filteredMembers)
                            {
                                <tr>
                                    <td>@member.MembershipNumber</td>
                                    <td>@member.FullName</td>
                                    <td>@member.Email</td>
                                    <td>@member.PhoneNumber</td>
                                    <td>
                                        @if (member.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactive</span>
                                        }
                                    </td>
                                    <td>@member.BorrowedBooks</td>
                                    <td>
                                        <a href="@($"/members/{member.Id}")" class="btn btn-sm btn-info me-2">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a href="@($"/members/edit/{member.Id}")" class="btn btn-sm btn-primary me-2">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteMember(member.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <p>Showing @(filteredMembers?.Count() ?? 0) members</p>
                </div>
                <div class="col-md-6">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-end">
                            <li class="page-item disabled">
                                <a class="page-link" href="#" tabindex="-1">Previous</a>
                            </li>
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            <li class="page-item"><a class="page-link" href="#">2</a></li>
                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <li class="page-item">
                                <a class="page-link" href="#">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Member> allMembers = new();
    private List<Member> filteredMembers = new();
    private string searchTerm = "";
    private string membershipStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        var members = await MemberService.GetAllMembersAsync();
        allMembers = members?.ToList() ?? new List<Member>();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredMembers = allMembers;

        // Apply search filter if search term exists
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredMembers = filteredMembers
                .Where(m => 
                    m.MembershipNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    m.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    m.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    m.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    m.PhoneNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Apply status filter if selected
        if (!string.IsNullOrWhiteSpace(membershipStatus))
        {
            bool isActive = membershipStatus.Equals("Active", StringComparison.OrdinalIgnoreCase);
            filteredMembers = filteredMembers.Where(m => m.IsActive == isActive).ToList();
        }
    }

    private async Task HandleSearch()
    {
        ApplyFilters();
    }

    private void HandleStatusFilter()
    {
        ApplyFilters();
    }

    private async Task DeleteMember(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this member?"))
        {
            await MemberService.DeleteMemberAsync(id);
            await LoadMembers();
        }
    }
} 