@page "/books/{Id:int}"
@using LibraryManagementSystem.Data.Models
@using LibraryManagementSystem.Data.Services
@inject IBookService BookService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Book Details - Library Management System</PageTitle>

@if (book == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col-6">
                <h1>Book Details</h1>
            </div>
            <div class="col-6 text-end">
                <a href="/books" class="btn btn-secondary me-2">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
                <a href="@($"/books/edit/{Id}")" class="btn btn-primary">
                    <i class="bi bi-pencil"></i> Edit Book
                </a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Book Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">ISBN</div>
                            <div class="col-md-8">@book.ISBN</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">Title</div>
                            <div class="col-md-8">@book.Title</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">Author</div>
                            <div class="col-md-8">@book.Author</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">Category</div>
                            <div class="col-md-8">@book.Category</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">Publisher</div>
                            <div class="col-md-8">@book.Publisher</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">Publication Date</div>
                            <div class="col-md-8">@(book.PublicationDate?.ToString("d") ?? "Not specified")</div>
                        </div>
                        <div class="row mb-4">
                            <div class="col-md-4 fw-bold">Description</div>
                            <div class="col-md-8">@book.Description</div>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Location Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4 fw-bold">Physical Location</div>
                            <div class="col-md-8">@book.Location</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Availability Status</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-12">
                                @if (book.IsAvailable)
                                {
                                    <div class="alert alert-success">
                                        <i class="bi bi-check-circle"></i> Available for Borrowing
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-warning">
                                        <i class="bi bi-exclamation-circle"></i> Currently Borrowed
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6 fw-bold">Total Copies</div>
                            <div class="col-md-6">@book.TotalCopies</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6 fw-bold">Available Copies</div>
                            <div class="col-md-6">@book.AvailableCopies</div>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Record Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6 fw-bold">Created At</div>
                            <div class="col-md-6">@book.CreatedAt.ToString("g")</div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6 fw-bold">Last Updated</div>
                            <div class="col-md-6">@book.UpdatedAt.ToString("g")</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Book? book;

    protected override async Task OnInitializedAsync()
    {
        await LoadBook();
    }

    private async Task LoadBook()
    {
        try
        {
            book = await BookService.GetBookByIdAsync(Id);
            if (book == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Book not found");
                NavigationManager.NavigateTo("/books");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading book: {ex.Message}");
            NavigationManager.NavigateTo("/books");
        }
    }
} 